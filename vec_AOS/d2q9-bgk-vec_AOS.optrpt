Intel(R) Advisor can now assist with vectorization and show optimization
  report messages with your source code.
See "https://software.intel.com/en-us/intel-advisor-xe" for details.

Intel(R) C Intel(R) 64 Compiler for applications running on Intel(R) 64, Version 19.1.3.304 Build 20200925_000000

Compiler options: -std=c99 -Wall -Ofast -mtune=native -xAVX2 -fma -qopenmp -qopenmp-simd -qopt-report=5 -lm -o d2q9-bgk-vec_AOS

    Report from: Interprocedural optimizations [ipo]

  WHOLE PROGRAM (SAFE) [EITHER METHOD]: false
  WHOLE PROGRAM (SEEN) [TABLE METHOD]: true
  WHOLE PROGRAM (READ) [OBJECT READER METHOD]: false

INLINING OPTION VALUES:
  -inline-factor: 100
  -inline-min-size: 30
  -inline-max-size: 230
  -inline-max-total-size: 2000
  -inline-max-per-routine: 10000
  -inline-max-per-compile: 500000

In the inlining report below:
   "sz" refers to the "size" of the routine. The smaller a routine's size,
      the more likely it is to be inlined.
   "isz" refers to the "inlined size" of the routine. This is the amount
      the calling routine will grow if the called routine is inlined into it.
      The compiler generally limits the amount a routine can grow by having
      routines inlined into it.

Begin optimization report for: main(int, char **)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (main(int, char **)) [1/12=8.3%] d2q9-bgk-vec_AOS.c(123,1)
  -> INLINE: (137,5) usage(const char *) (isz = 6) (sz = 10)
    -> EXTERN: (735,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (736,3) exit(int)
  -> EXTERN: (146,3) gettimeofday(struct timeval *__restrict__, __timezone_ptr_t)
  -> (149,3) initialise(const char *, const char *, t_param *, t_speed **, t_speed **, int **, float **) (isz = 701) (sz = 720)
     [[ Inlining would exceed -inline-max-size value (720>230) <1>]]
  -> EXTERN: (152,3) gettimeofday(struct timeval *__restrict__, __timezone_ptr_t)
  -> INLINE: (158,19) timestep(const t_param, t_speed **, t_speed **, int *) (isz = 177) (sz = 190)
    -> INLINE: (194,3) accelerate_flow(const t_param, t_speed *, int *) (isz = 160) (sz = 171)
    -> (195,18) calculateNextState(const t_param, t_speed *, t_speed *, int *) (isz = 493) (sz = 506)
       [[ Inlining would exceed -inline-max-size value (506>230) <1>]]
  -> EXTERN: (168,3) gettimeofday(struct timeval *__restrict__, __timezone_ptr_t)
  -> EXTERN: (175,3) gettimeofday(struct timeval *__restrict__, __timezone_ptr_t)
  -> EXTERN: (180,3) printf(const char *__restrict__, ...)
  -> EXTERN: (181,3) printf(const char *__restrict__, ...)
  -> INLINE: (181,41) calc_reynolds(const t_param, t_speed *, int *) (isz = 173) (sz = 184)
    -> INLINE: (617,10) av_velocity(const t_param, t_speed *, int *) (isz = 163) (sz = 174)
  -> EXTERN: (182,3) printf(const char *__restrict__, ...)
  -> EXTERN: (183,3) printf(const char *__restrict__, ...)
  -> EXTERN: (184,3) printf(const char *__restrict__, ...)
  -> EXTERN: (185,3) printf(const char *__restrict__, ...)
  -> (186,3) write_values(const t_param, t_speed *, int *, float *) (isz = 273) (sz = 286)
     [[ Inlining would exceed -inline-max-size value (286>230) <1>]]
  -> INLINE: (187,3) finalise(const t_param *, t_speed **, t_speed **, int **, float **) (isz = 14) (sz = 29)
    -> EXTERN: (597,3) _mm_free(void *)
    -> EXTERN: (600,3) _mm_free(void *)
    -> EXTERN: (603,3) free(void *)
    -> EXTERN: (606,3) free(void *)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at d2q9-bgk-vec_AOS.c(156,3)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at d2q9-bgk-vec_AOS.c(215,3) inlined into d2q9-bgk-vec_AOS.c(158,19)
   <Peeled loop for vectorization>
      remark #25015: Estimate of max trip count of loop=7
   LOOP END

   LOOP BEGIN at d2q9-bgk-vec_AOS.c(215,3) inlined into d2q9-bgk-vec_AOS.c(158,19)
      remark #15415: vectorization support: non-unit strided load was generated for the variable <cells->speeds[ii+jj*params.nx][3]>, stride is 9   [ d2q9-bgk-vec_AOS.c(220,13) ]
      remark #15415: vectorization support: non-unit strided load was generated for the variable <cells->speeds[ii+jj*params.nx][6]>, stride is 9   [ d2q9-bgk-vec_AOS.c(221,13) ]
      remark #15415: vectorization support: non-unit strided load was generated for the variable <cells->speeds[ii+jj*params.nx][7]>, stride is 9   [ d2q9-bgk-vec_AOS.c(222,13) ]
      remark #15329: vectorization support: non-unit strided store was emulated for the variable <cells->speeds[ii+jj*params.nx][1]>, masked, stride is 9   [ d2q9-bgk-vec_AOS.c(225,7) ]
      remark #15415: vectorization support: non-unit strided load was generated for the variable <cells->speeds[ii+jj*params.nx][1]>, masked, stride is 9   [ d2q9-bgk-vec_AOS.c(225,7) ]
      remark #15329: vectorization support: non-unit strided store was emulated for the variable <cells->speeds[ii+jj*params.nx][5]>, masked, stride is 9   [ d2q9-bgk-vec_AOS.c(226,7) ]
      remark #15415: vectorization support: non-unit strided load was generated for the variable <cells->speeds[ii+jj*params.nx][5]>, masked, stride is 9   [ d2q9-bgk-vec_AOS.c(226,7) ]
      remark #15329: vectorization support: non-unit strided store was emulated for the variable <cells->speeds[ii+jj*params.nx][8]>, masked, stride is 9   [ d2q9-bgk-vec_AOS.c(227,7) ]
      remark #15415: vectorization support: non-unit strided load was generated for the variable <cells->speeds[ii+jj*params.nx][8]>, masked, stride is 9   [ d2q9-bgk-vec_AOS.c(227,7) ]
      remark #15329: vectorization support: non-unit strided store was emulated for the variable <cells->speeds[ii+jj*params.nx][3]>, stride is 9   [ d2q9-bgk-vec_AOS.c(229,7) ]
      remark #15415: vectorization support: non-unit strided load was generated for the variable <cells->speeds[ii+jj*params.nx][3]>, stride is 9   [ d2q9-bgk-vec_AOS.c(229,7) ]
      remark #15329: vectorization support: non-unit strided store was emulated for the variable <cells->speeds[ii+jj*params.nx][6]>, stride is 9   [ d2q9-bgk-vec_AOS.c(230,7) ]
      remark #15415: vectorization support: non-unit strided load was generated for the variable <cells->speeds[ii+jj*params.nx][6]>, stride is 9   [ d2q9-bgk-vec_AOS.c(230,7) ]
      remark #15329: vectorization support: non-unit strided store was emulated for the variable <cells->speeds[ii+jj*params.nx][7]>, stride is 9   [ d2q9-bgk-vec_AOS.c(231,7) ]
      remark #15415: vectorization support: non-unit strided load was generated for the variable <cells->speeds[ii+jj*params.nx][7]>, stride is 9   [ d2q9-bgk-vec_AOS.c(231,7) ]
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 0.027
      remark #15301: SIMD LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15452: unmasked strided loads: 6 
      remark #15453: unmasked strided stores: 3 
      remark #15460: masked strided loads: 3 
      remark #15462: unmasked indexed (or gather) loads: 3 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 19 
      remark #15477: vector cost: 88.500 
      remark #15478: estimated potential speedup: 0.220 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at d2q9-bgk-vec_AOS.c(215,3) inlined into d2q9-bgk-vec_AOS.c(158,19)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at d2q9-bgk-vec_AOS.c(394,3) inlined into d2q9-bgk-vec_AOS.c(181,41)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at d2q9-bgk-vec_AOS.c(396,5) inlined into d2q9-bgk-vec_AOS.c(181,41)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at d2q9-bgk-vec_AOS.c(404,9) inlined into d2q9-bgk-vec_AOS.c(181,41)
         remark #15389: vectorization support: reference cells->speeds[ii+jj*params.nx][kk] has unaligned access   [ d2q9-bgk-vec_AOS.c(406,28) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15305: vectorization support: vector length 4
         remark #15399: vectorization support: unroll factor set to 2
         remark #15309: vectorization support: normalized vectorization overhead 1.833
         remark #15355: vectorization support: local_density is float type reduction   [ d2q9-bgk-vec_AOS.c(402,29) ]
         remark #15300: LOOP WAS VECTORIZED
         remark #15450: unmasked unaligned unit stride loads: 1 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 5 
         remark #15477: vector cost: 1.500 
         remark #15478: estimated potential speedup: 1.150 
         remark #15488: --- end vector cost summary ---
         remark #25015: Estimate of max trip count of loop=1
      LOOP END

      LOOP BEGIN at d2q9-bgk-vec_AOS.c(404,9) inlined into d2q9-bgk-vec_AOS.c(181,41)
      <Remainder loop for vectorization>
         remark #25436: completely unrolled by 1  
      LOOP END
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

d2q9-bgk-vec_AOS.c(204:29)::main:  Assume directive not useful: removing

d2q9-bgk-vec_AOS.c(205:28)::main:  Assume directive not useful: removing

d2q9-bgk-vec_AOS.c(206:28)::main:  Assume directive not useful: removing

d2q9-bgk-vec_AOS.c(229,7):remark #34064: adjacent sparse (strided) loads partitioned for speed. Details: stride { 36 }, types { F32-V256, I32-V256, I32-V256, F32-V256, F32-V256 }, number of elements { 8 }, select mask { 0x000000019 }.
d2q9-bgk-vec_AOS.c(229,7):remark #34030: adjacent sparse (strided) loads optimized for speed. Details: stride { 36 }, types { F32-V256, F32-V256 }, number of elements { 8 }, select mask { 0x000000003 }.
d2q9-bgk-vec_AOS.c(229,7):remark #34069: adjacent sparse (strided) loads seem unprofitable to optimize. Details: stride { 36 }, types { F32-V256, I32-V256, I32-V256, F32-V256, F32-V256 }, number of elements { 8 }, select mask { 0x000000001 }.
d2q9-bgk-vec_AOS.c(231,7):remark #34065: adjacent sparse (strided) stores partitioned for speed. Details: stride { 36 }, types { F32-V256, I32-V256, I32-V256, F32-V256, F32-V256 }, number of elements { 8 }, select mask { 0x000000019 }.
d2q9-bgk-vec_AOS.c(231,7):remark #34034: adjacent sparse (strided) stores optimized for speed. Details: stride { 36 }, types { F32-V256, F32-V256 }, number of elements { 8 }, select mask { 0x000000003 }.
d2q9-bgk-vec_AOS.c(231,7):remark #34070: adjacent sparse (strided) stores seem unprofitable to optimize. Details: stride { 36 }, types { F32-V256, I32-V256, I32-V256, F32-V256, F32-V256 }, number of elements { 8 }, select mask { 0x000000001 }.
d2q9-bgk-vec_AOS.c(158,19):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (16, 0), and destination (alignment, offset): (16, 0)
d2q9-bgk-vec_AOS.c(195,18):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (16, 0), and destination (alignment, offset): (1, 0)
d2q9-bgk-vec_AOS.c(181,41):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (16, 0), and destination (alignment, offset): (16, 0)
d2q9-bgk-vec_AOS.c(186,3):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (16, 0), and destination (alignment, offset): (1, 0)
d2q9-bgk-vec_AOS.c(123,1):remark #34051: REGISTER ALLOCATION : [main] d2q9-bgk-vec_AOS.c:123

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   30[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm15]
        
    Routine temporaries
        Total         :     393
            Global    :     118
            Local     :     275
        Regenerable   :      64
        Spilled       :      21
        
    Routine stack
        Variables     :     136 bytes*
            Reads     :      42 [4.44e+00 ~ 4.4%]
            Writes    :      18 [2.01e+00 ~ 2.0%]
        Spills        :     128 bytes*
            Reads     :      23 [2.07e+00 ~ 2.1%]
            Writes    :      16 [1.42e+00 ~ 1.4%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: calculateNextState(const t_param, t_speed *, t_speed *, int *)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (calculateNextState(const t_param, t_speed *, t_speed *, int *)) [2/12=16.7%] d2q9-bgk-vec_AOS.c(238,1)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at d2q9-bgk-vec_AOS.c(265,5)
   remark #25261: Invariant Condition eliminated(Proven True) at line 272
   remark #25258: Invariant Condition eliminated(Loop at level 1 peeled) at line 274 
   remark #25260: Invariant Condition eliminated(Proven False) at line 274
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <tmp_cells->speeds[index][0]>, stride is 9   [ d2q9-bgk-vec_AOS.c(281,9) ]
   remark #15415: vectorization support: non-unit strided load was generated for the variable <tmp_cells->speeds[index][0]>, stride is 9   [ d2q9-bgk-vec_AOS.c(281,9) ]
   remark #15415: vectorization support: non-unit strided load was generated for the variable <cells->speeds[index][0]>, stride is 9   [ d2q9-bgk-vec_AOS.c(281,38) ]
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <tmp_cells->speeds[index][1]>, masked, stride is 9   [ d2q9-bgk-vec_AOS.c(282,9) ]
   remark #15415: vectorization support: irregularly indexed load was generated for the variable <cells->speeds[x_e+jj*params.nx][3]>, masked, 64-bit indexed, part of index is nonlinearly computed   [ d2q9-bgk-vec_AOS.c(282,38) ]
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <tmp_cells->speeds[index][2]>, masked, stride is 9   [ d2q9-bgk-vec_AOS.c(283,9) ]
   remark #15415: vectorization support: non-unit strided load was generated for the variable <cells->speeds[ii+y_n*params.nx][4]>, masked, stride is 9   [ d2q9-bgk-vec_AOS.c(283,38) ]
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <tmp_cells->speeds[index][3]>, masked, stride is 9   [ d2q9-bgk-vec_AOS.c(284,9) ]
   remark #15415: vectorization support: non-unit strided load was generated for the variable <cells->speeds[x_w+jj*params.nx][1]>, masked, stride is 9   [ d2q9-bgk-vec_AOS.c(284,38) ]
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <tmp_cells->speeds[index][4]>, masked, stride is 9   [ d2q9-bgk-vec_AOS.c(285,9) ]
   remark #15415: vectorization support: non-unit strided load was generated for the variable <cells->speeds[ii+y_s*params.nx][2]>, masked, stride is 9   [ d2q9-bgk-vec_AOS.c(285,38) ]
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <tmp_cells->speeds[index][5]>, masked, stride is 9   [ d2q9-bgk-vec_AOS.c(286,9) ]
   remark #15415: vectorization support: irregularly indexed load was generated for the variable <cells->speeds[x_e+y_n*params.nx][7]>, masked, 64-bit indexed, part of index is nonlinearly computed   [ d2q9-bgk-vec_AOS.c(286,38) ]
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <tmp_cells->speeds[index][6]>, masked, stride is 9   [ d2q9-bgk-vec_AOS.c(287,9) ]
   remark #15415: vectorization support: non-unit strided load was generated for the variable <cells->speeds[x_w+y_n*params.nx][8]>, masked, stride is 9   [ d2q9-bgk-vec_AOS.c(287,38) ]
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <tmp_cells->speeds[index][7]>, masked, stride is 9   [ d2q9-bgk-vec_AOS.c(288,9) ]
   remark #15415: vectorization support: non-unit strided load was generated for the variable <cells->speeds[x_w+y_s*params.nx][5]>, masked, stride is 9   [ d2q9-bgk-vec_AOS.c(288,38) ]
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <tmp_cells->speeds[index][8]>, masked, stride is 9   [ d2q9-bgk-vec_AOS.c(289,9) ]
   remark #15415: vectorization support: irregularly indexed load was generated for the variable <cells->speeds[x_e+y_s*params.nx][6]>, masked, 64-bit indexed, part of index is nonlinearly computed   [ d2q9-bgk-vec_AOS.c(289,38) ]
   remark #15415: vectorization support: non-unit strided load was generated for the variable <cells->speeds[index][0]>, stride is 9   [ d2q9-bgk-vec_AOS.c(298,23) ]
   remark #15415: vectorization support: non-unit strided load was generated for the variable <cells->speeds[x_w+jj*params.nx][1]>, masked, stride is 9   [ d2q9-bgk-vec_AOS.c(299,23) ]
   remark #15415: vectorization support: non-unit strided load was generated for the variable <cells->speeds[ii+y_s*params.nx][2]>, masked, stride is 9   [ d2q9-bgk-vec_AOS.c(300,23) ]
   remark #15415: vectorization support: irregularly indexed load was generated for the variable <cells->speeds[x_e+jj*params.nx][3]>, masked, 64-bit indexed, part of index is nonlinearly computed   [ d2q9-bgk-vec_AOS.c(301,23) ]
   remark #15415: vectorization support: non-unit strided load was generated for the variable <cells->speeds[ii+y_n*params.nx][4]>, masked, stride is 9   [ d2q9-bgk-vec_AOS.c(302,23) ]
   remark #15415: vectorization support: non-unit strided load was generated for the variable <cells->speeds[x_w+y_s*params.nx][5]>, masked, stride is 9   [ d2q9-bgk-vec_AOS.c(303,23) ]
   remark #15415: vectorization support: irregularly indexed load was generated for the variable <cells->speeds[x_e+y_s*params.nx][6]>, masked, 64-bit indexed, part of index is nonlinearly computed   [ d2q9-bgk-vec_AOS.c(304,23) ]
   remark #15415: vectorization support: irregularly indexed load was generated for the variable <cells->speeds[x_e+y_n*params.nx][7]>, masked, 64-bit indexed, part of index is nonlinearly computed   [ d2q9-bgk-vec_AOS.c(305,23) ]
   remark #15415: vectorization support: non-unit strided load was generated for the variable <cells->speeds[x_w+y_n*params.nx][8]>, masked, stride is 9   [ d2q9-bgk-vec_AOS.c(306,23) ]
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <tmp_cells->speeds[index][kk]>, stride is 9   [ d2q9-bgk-vec_AOS.c(369,11) ]
   remark #15415: vectorization support: non-unit strided load was generated for the variable <tmp_cells->speeds[index][kk]>, stride is 9   [ d2q9-bgk-vec_AOS.c(369,11) ]
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <tmp_cells->speeds[index][kk]>, stride is 9   [ d2q9-bgk-vec_AOS.c(369,11) ]
   remark #15415: vectorization support: non-unit strided load was generated for the variable <tmp_cells->speeds[index][kk]>, stride is 9   [ d2q9-bgk-vec_AOS.c(369,11) ]
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <tmp_cells->speeds[index][kk]>, stride is 9   [ d2q9-bgk-vec_AOS.c(369,11) ]
   remark #15415: vectorization support: non-unit strided load was generated for the variable <tmp_cells->speeds[index][kk]>, stride is 9   [ d2q9-bgk-vec_AOS.c(369,11) ]
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <tmp_cells->speeds[index][kk]>, stride is 9   [ d2q9-bgk-vec_AOS.c(369,11) ]
   remark #15415: vectorization support: non-unit strided load was generated for the variable <tmp_cells->speeds[index][kk]>, stride is 9   [ d2q9-bgk-vec_AOS.c(369,11) ]
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <tmp_cells->speeds[index][kk]>, stride is 9   [ d2q9-bgk-vec_AOS.c(369,11) ]
   remark #15415: vectorization support: non-unit strided load was generated for the variable <tmp_cells->speeds[index][kk]>, stride is 9   [ d2q9-bgk-vec_AOS.c(369,11) ]
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <tmp_cells->speeds[index][kk]>, stride is 9   [ d2q9-bgk-vec_AOS.c(369,11) ]
   remark #15415: vectorization support: non-unit strided load was generated for the variable <tmp_cells->speeds[index][kk]>, stride is 9   [ d2q9-bgk-vec_AOS.c(369,11) ]
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <tmp_cells->speeds[index][kk]>, stride is 9   [ d2q9-bgk-vec_AOS.c(369,11) ]
   remark #15415: vectorization support: non-unit strided load was generated for the variable <tmp_cells->speeds[index][kk]>, stride is 9   [ d2q9-bgk-vec_AOS.c(369,11) ]
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <tmp_cells->speeds[index][kk]>, stride is 9   [ d2q9-bgk-vec_AOS.c(369,11) ]
   remark #15415: vectorization support: non-unit strided load was generated for the variable <tmp_cells->speeds[index][kk]>, stride is 9   [ d2q9-bgk-vec_AOS.c(369,11) ]
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <tmp_cells->speeds[index][kk]>, stride is 9   [ d2q9-bgk-vec_AOS.c(369,11) ]
   remark #15415: vectorization support: non-unit strided load was generated for the variable <tmp_cells->speeds[index][kk]>, stride is 9   [ d2q9-bgk-vec_AOS.c(369,11) ]
   remark #15305: vectorization support: vector length 8
   remark #15309: vectorization support: normalized vectorization overhead 0.066
   remark #26012: vectorization support: data layout of a private variable new_cell was optimized, converted to SoA
   remark #26012: vectorization support: data layout of a private variable d_equ was optimized, converted to SoA
   remark #15355: vectorization support: tot_u is float type reduction   [ d2q9-bgk-vec_AOS.c(256,15) ]
   remark #15355: vectorization support: tot_cells is int type reduction   [ d2q9-bgk-vec_AOS.c(255,19) ]
   remark #15301: SIMD LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 18 
   remark #15452: unmasked strided loads: 12 
   remark #15453: unmasked strided stores: 10 
   remark #15456: masked unaligned unit stride loads: 54 
   remark #15458: masked indexed (or gather) loads: 6 
   remark #15460: masked strided loads: 10 
   remark #15462: unmasked indexed (or gather) loads: 8 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 391 
   remark #15477: vector cost: 449.500 
   remark #15478: estimated potential speedup: 0.860 
   remark #15482: vectorized math library calls: 1 
   remark #15486: divides: 2 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at d2q9-bgk-vec_AOS.c(265,5)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at d2q9-bgk-vec_AOS.c(258,3)
   remark #25261: Invariant Condition eliminated(Proven True) at line 274
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at d2q9-bgk-vec_AOS.c(265,5)
      remark #25258: Invariant Condition eliminated(Loop at level 1 peeled) at line 272 
      remark #25260: Invariant Condition eliminated(Proven False) at line 272
      remark #25258: Invariant Condition eliminated(Loop at level 2 peeled) at line 274 
      remark #25260: Invariant Condition eliminated(Proven False) at line 274
      remark #15329: vectorization support: non-unit strided store was emulated for the variable <tmp_cells->speeds[index][0]>, stride is 9   [ d2q9-bgk-vec_AOS.c(281,9) ]
      remark #15415: vectorization support: non-unit strided load was generated for the variable <tmp_cells->speeds[index][0]>, stride is 9   [ d2q9-bgk-vec_AOS.c(281,9) ]
      remark #15415: vectorization support: non-unit strided load was generated for the variable <cells->speeds[index][0]>, stride is 9   [ d2q9-bgk-vec_AOS.c(281,38) ]
      remark #15329: vectorization support: non-unit strided store was emulated for the variable <tmp_cells->speeds[index][1]>, masked, stride is 9   [ d2q9-bgk-vec_AOS.c(282,9) ]
      remark #15415: vectorization support: irregularly indexed load was generated for the variable <cells->speeds[x_e+jj*params.nx][3]>, masked, 64-bit indexed, part of index is nonlinearly computed   [ d2q9-bgk-vec_AOS.c(282,38) ]
      remark #15329: vectorization support: non-unit strided store was emulated for the variable <tmp_cells->speeds[index][2]>, masked, stride is 9   [ d2q9-bgk-vec_AOS.c(283,9) ]
      remark #15415: vectorization support: non-unit strided load was generated for the variable <cells->speeds[ii+y_n*params.nx][4]>, masked, stride is 9   [ d2q9-bgk-vec_AOS.c(283,38) ]
      remark #15329: vectorization support: non-unit strided store was emulated for the variable <tmp_cells->speeds[index][3]>, masked, stride is 9   [ d2q9-bgk-vec_AOS.c(284,9) ]
      remark #15415: vectorization support: non-unit strided load was generated for the variable <cells->speeds[x_w+jj*params.nx][1]>, masked, stride is 9   [ d2q9-bgk-vec_AOS.c(284,38) ]
      remark #15329: vectorization support: non-unit strided store was emulated for the variable <tmp_cells->speeds[index][4]>, masked, stride is 9   [ d2q9-bgk-vec_AOS.c(285,9) ]
      remark #15415: vectorization support: non-unit strided load was generated for the variable <cells->speeds[ii+y_s*params.nx][2]>, masked, stride is 9   [ d2q9-bgk-vec_AOS.c(285,38) ]
      remark #15329: vectorization support: non-unit strided store was emulated for the variable <tmp_cells->speeds[index][5]>, masked, stride is 9   [ d2q9-bgk-vec_AOS.c(286,9) ]
      remark #15415: vectorization support: irregularly indexed load was generated for the variable <cells->speeds[x_e+y_n*params.nx][7]>, masked, 64-bit indexed, part of index is nonlinearly computed   [ d2q9-bgk-vec_AOS.c(286,38) ]
      remark #15329: vectorization support: non-unit strided store was emulated for the variable <tmp_cells->speeds[index][6]>, masked, stride is 9   [ d2q9-bgk-vec_AOS.c(287,9) ]
      remark #15415: vectorization support: non-unit strided load was generated for the variable <cells->speeds[x_w+y_n*params.nx][8]>, masked, stride is 9   [ d2q9-bgk-vec_AOS.c(287,38) ]
      remark #15329: vectorization support: non-unit strided store was emulated for the variable <tmp_cells->speeds[index][7]>, masked, stride is 9   [ d2q9-bgk-vec_AOS.c(288,9) ]
      remark #15415: vectorization support: non-unit strided load was generated for the variable <cells->speeds[x_w+y_s*params.nx][5]>, masked, stride is 9   [ d2q9-bgk-vec_AOS.c(288,38) ]
      remark #15329: vectorization support: non-unit strided store was emulated for the variable <tmp_cells->speeds[index][8]>, masked, stride is 9   [ d2q9-bgk-vec_AOS.c(289,9) ]
      remark #15415: vectorization support: irregularly indexed load was generated for the variable <cells->speeds[x_e+y_s*params.nx][6]>, masked, 64-bit indexed, part of index is nonlinearly computed   [ d2q9-bgk-vec_AOS.c(289,38) ]
      remark #15415: vectorization support: non-unit strided load was generated for the variable <cells->speeds[index][0]>, stride is 9   [ d2q9-bgk-vec_AOS.c(298,23) ]
      remark #15415: vectorization support: non-unit strided load was generated for the variable <cells->speeds[x_w+jj*params.nx][1]>, masked, stride is 9   [ d2q9-bgk-vec_AOS.c(299,23) ]
      remark #15415: vectorization support: non-unit strided load was generated for the variable <cells->speeds[ii+y_s*params.nx][2]>, masked, stride is 9   [ d2q9-bgk-vec_AOS.c(300,23) ]
      remark #15415: vectorization support: irregularly indexed load was generated for the variable <cells->speeds[x_e+jj*params.nx][3]>, masked, 64-bit indexed, part of index is nonlinearly computed   [ d2q9-bgk-vec_AOS.c(301,23) ]
      remark #15415: vectorization support: non-unit strided load was generated for the variable <cells->speeds[ii+y_n*params.nx][4]>, masked, stride is 9   [ d2q9-bgk-vec_AOS.c(302,23) ]
      remark #15415: vectorization support: non-unit strided load was generated for the variable <cells->speeds[x_w+y_s*params.nx][5]>, masked, stride is 9   [ d2q9-bgk-vec_AOS.c(303,23) ]
      remark #15415: vectorization support: irregularly indexed load was generated for the variable <cells->speeds[x_e+y_s*params.nx][6]>, masked, 64-bit indexed, part of index is nonlinearly computed   [ d2q9-bgk-vec_AOS.c(304,23) ]
      remark #15415: vectorization support: irregularly indexed load was generated for the variable <cells->speeds[x_e+y_n*params.nx][7]>, masked, 64-bit indexed, part of index is nonlinearly computed   [ d2q9-bgk-vec_AOS.c(305,23) ]
      remark #15415: vectorization support: non-unit strided load was generated for the variable <cells->speeds[x_w+y_n*params.nx][8]>, masked, stride is 9   [ d2q9-bgk-vec_AOS.c(306,23) ]
      remark #15329: vectorization support: non-unit strided store was emulated for the variable <tmp_cells->speeds[index][kk]>, stride is 9   [ d2q9-bgk-vec_AOS.c(369,11) ]
      remark #15415: vectorization support: non-unit strided load was generated for the variable <tmp_cells->speeds[index][kk]>, stride is 9   [ d2q9-bgk-vec_AOS.c(369,11) ]
      remark #15329: vectorization support: non-unit strided store was emulated for the variable <tmp_cells->speeds[index][kk]>, stride is 9   [ d2q9-bgk-vec_AOS.c(369,11) ]
      remark #15415: vectorization support: non-unit strided load was generated for the variable <tmp_cells->speeds[index][kk]>, stride is 9   [ d2q9-bgk-vec_AOS.c(369,11) ]
      remark #15329: vectorization support: non-unit strided store was emulated for the variable <tmp_cells->speeds[index][kk]>, stride is 9   [ d2q9-bgk-vec_AOS.c(369,11) ]
      remark #15415: vectorization support: non-unit strided load was generated for the variable <tmp_cells->speeds[index][kk]>, stride is 9   [ d2q9-bgk-vec_AOS.c(369,11) ]
      remark #15329: vectorization support: non-unit strided store was emulated for the variable <tmp_cells->speeds[index][kk]>, stride is 9   [ d2q9-bgk-vec_AOS.c(369,11) ]
      remark #15415: vectorization support: non-unit strided load was generated for the variable <tmp_cells->speeds[index][kk]>, stride is 9   [ d2q9-bgk-vec_AOS.c(369,11) ]
      remark #15329: vectorization support: non-unit strided store was emulated for the variable <tmp_cells->speeds[index][kk]>, stride is 9   [ d2q9-bgk-vec_AOS.c(369,11) ]
      remark #15415: vectorization support: non-unit strided load was generated for the variable <tmp_cells->speeds[index][kk]>, stride is 9   [ d2q9-bgk-vec_AOS.c(369,11) ]
      remark #15329: vectorization support: non-unit strided store was emulated for the variable <tmp_cells->speeds[index][kk]>, stride is 9   [ d2q9-bgk-vec_AOS.c(369,11) ]
      remark #15415: vectorization support: non-unit strided load was generated for the variable <tmp_cells->speeds[index][kk]>, stride is 9   [ d2q9-bgk-vec_AOS.c(369,11) ]
      remark #15329: vectorization support: non-unit strided store was emulated for the variable <tmp_cells->speeds[index][kk]>, stride is 9   [ d2q9-bgk-vec_AOS.c(369,11) ]
      remark #15415: vectorization support: non-unit strided load was generated for the variable <tmp_cells->speeds[index][kk]>, stride is 9   [ d2q9-bgk-vec_AOS.c(369,11) ]
      remark #15329: vectorization support: non-unit strided store was emulated for the variable <tmp_cells->speeds[index][kk]>, stride is 9   [ d2q9-bgk-vec_AOS.c(369,11) ]
      remark #15415: vectorization support: non-unit strided load was generated for the variable <tmp_cells->speeds[index][kk]>, stride is 9   [ d2q9-bgk-vec_AOS.c(369,11) ]
      remark #15329: vectorization support: non-unit strided store was emulated for the variable <tmp_cells->speeds[index][kk]>, stride is 9   [ d2q9-bgk-vec_AOS.c(369,11) ]
      remark #15415: vectorization support: non-unit strided load was generated for the variable <tmp_cells->speeds[index][kk]>, stride is 9   [ d2q9-bgk-vec_AOS.c(369,11) ]
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 0.066
      remark #26012: vectorization support: data layout of a private variable new_cell was optimized, converted to SoA
      remark #26012: vectorization support: data layout of a private variable d_equ was optimized, converted to SoA
      remark #15355: vectorization support: tot_u is float type reduction   [ d2q9-bgk-vec_AOS.c(256,15) ]
      remark #15355: vectorization support: tot_cells is int type reduction   [ d2q9-bgk-vec_AOS.c(255,19) ]
      remark #15301: SIMD LOOP WAS VECTORIZED
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15451: unmasked unaligned unit stride stores: 18 
      remark #15452: unmasked strided loads: 12 
      remark #15453: unmasked strided stores: 10 
      remark #15456: masked unaligned unit stride loads: 54 
      remark #15458: masked indexed (or gather) loads: 6 
      remark #15460: masked strided loads: 10 
      remark #15462: unmasked indexed (or gather) loads: 8 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 391 
      remark #15477: vector cost: 449.500 
      remark #15478: estimated potential speedup: 0.860 
      remark #15482: vectorized math library calls: 1 
      remark #15486: divides: 2 
      remark #15488: --- end vector cost summary ---

      LOOP BEGIN at d2q9-bgk-vec_AOS.c(311,9)
         remark #25436: completely unrolled by 9   (pre-vector) 
      LOOP END

      LOOP BEGIN at d2q9-bgk-vec_AOS.c(367,9)
         remark #25436: completely unrolled by 9   (pre-vector) 
      LOOP END
   LOOP END

   LOOP BEGIN at d2q9-bgk-vec_AOS.c(265,5)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

d2q9-bgk-vec_AOS.c(369,11):remark #34064: adjacent sparse (strided) loads partitioned for speed. Details: stride { 36 }, types { F32-V256, F32-V256, F32-V256, F32-V256, F32-V256, F32-V256, F32-V256, F32-V256, F32-V256 }, number of elements { 8 }, select mask { 0x0000001FF }.
d2q9-bgk-vec_AOS.c(369,11):remark #34030: adjacent sparse (strided) loads optimized for speed. Details: stride { 36 }, types { F32-V256, F32-V256, F32-V256, F32-V256, F32-V256, F32-V256, F32-V256, F32-V256 }, number of elements { 8 }, select mask { 0x0000000FF }.
d2q9-bgk-vec_AOS.c(369,11):remark #34069: adjacent sparse (strided) loads seem unprofitable to optimize. Details: stride { 36 }, types { F32-V256, F32-V256, F32-V256, F32-V256, F32-V256, F32-V256, F32-V256, F32-V256, F32-V256 }, number of elements { 8 }, select mask { 0x000000100 }.
d2q9-bgk-vec_AOS.c(369,11):remark #34064: adjacent sparse (strided) loads partitioned for speed. Details: stride { 36 }, types { F32-V256, F32-V256, F32-V256, F32-V256, F32-V256, F32-V256, F32-V256, F32-V256, F32-V256 }, number of elements { 8 }, select mask { 0x0000001FF }.
d2q9-bgk-vec_AOS.c(369,11):remark #34030: adjacent sparse (strided) loads optimized for speed. Details: stride { 36 }, types { F32-V256, F32-V256, F32-V256, F32-V256, F32-V256, F32-V256, F32-V256, F32-V256 }, number of elements { 8 }, select mask { 0x0000000FF }.
d2q9-bgk-vec_AOS.c(369,11):remark #34069: adjacent sparse (strided) loads seem unprofitable to optimize. Details: stride { 36 }, types { F32-V256, F32-V256, F32-V256, F32-V256, F32-V256, F32-V256, F32-V256, F32-V256, F32-V256 }, number of elements { 8 }, select mask { 0x000000100 }.
d2q9-bgk-vec_AOS.c(238,1):remark #34051: REGISTER ALLOCATION : [calculateNextState] d2q9-bgk-vec_AOS.c:238

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   30[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm15]
        
    Routine temporaries
        Total         :    1768
            Global    :     310
            Local     :    1458
        Regenerable   :      73
        Spilled       :      85
        
    Routine stack
        Variables     :    1152 bytes*
            Reads     :      72 [2.73e+00 ~ 2.7%]
            Writes    :      36 [1.36e+00 ~ 1.4%]
        Spills        :    1464 bytes*
            Reads     :     138 [4.69e+00 ~ 4.7%]
            Writes    :      95 [2.11e+00 ~ 2.1%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: write_values(const t_param, t_speed *, int *, float *)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (write_values(const t_param, t_speed *, int *, float *)) [3/12=25.0%] d2q9-bgk-vec_AOS.c(639,1)
  -> EXTERN: (652,8) fopen(const char *__restrict__, const char *__restrict__)
  -> INLINE: (656,5) die(const char *, const int, const char *) (isz = 14) (sz = 22)
    -> EXTERN: (727,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (728,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (729,3) fflush(FILE *)
    -> EXTERN: (730,3) exit(int)
  -> EXTERN: (702,7) fprintf(FILE *__restrict__, const char *__restrict__, ...)
  -> EXTERN: (706,3) fclose(FILE *)
  -> EXTERN: (708,8) fopen(const char *__restrict__, const char *__restrict__)
  -> INLINE: (712,5) die(const char *, const int, const char *) (isz = 14) (sz = 22)
    -> EXTERN: (727,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (728,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (729,3) fflush(FILE *)
    -> EXTERN: (730,3) exit(int)
  -> EXTERN: (717,5) fprintf(FILE *__restrict__, const char *__restrict__, ...)
  -> EXTERN: (720,3) fclose(FILE *)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at d2q9-bgk-vec_AOS.c(659,3)
   remark #15382: vectorization support: call to function fprintf(FILE *__restrict__, const char *__restrict__, ...) cannot be vectorized   [ d2q9-bgk-vec_AOS.c(702,7) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed OUTPUT dependence between call:fprintf(FILE *__restrict__, const char *__restrict__, ...) (702:7) and call:fprintf(FILE *__restrict__, const char *__restrict__, ...) (702:7)
   remark #15346: vector dependence: assumed OUTPUT dependence between call:fprintf(FILE *__restrict__, const char *__restrict__, ...) (702:7) and call:fprintf(FILE *__restrict__, const char *__restrict__, ...) (702:7)

   LOOP BEGIN at d2q9-bgk-vec_AOS.c(661,5)
      remark #15527: loop was not vectorized: function call to fprintf(FILE *__restrict__, const char *__restrict__, ...) cannot be vectorized   [ d2q9-bgk-vec_AOS.c(702,7) ]

      LOOP BEGIN at d2q9-bgk-vec_AOS.c(674,9)
         remark #25436: completely unrolled by 9   (pre-vector) 
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at d2q9-bgk-vec_AOS.c(715,3)
   remark #15527: loop was not vectorized: function call to fprintf(FILE *__restrict__, const char *__restrict__, ...) cannot be vectorized   [ d2q9-bgk-vec_AOS.c(717,5) ]
LOOP END

    Report from: Code generation optimizations [cg]

d2q9-bgk-vec_AOS.c(639,1):remark #34051: REGISTER ALLOCATION : [write_values] d2q9-bgk-vec_AOS.c:639

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   30[ rax rdx rcx rbx rbp rsi rdi r8-r10 r12-r15 zmm0-zmm15]
        
    Routine temporaries
        Total         :     145
            Global    :      40
            Local     :     105
        Regenerable   :      45
        Spilled       :      13
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :      64 bytes*
            Reads     :       9 [4.95e+00 ~ 5.0%]
            Writes    :       8 [2.02e+00 ~ 2.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: timestep(const t_param, t_speed **, t_speed **, int *)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (timestep(const t_param, t_speed **, t_speed **, int *)) [4/12=33.3%] d2q9-bgk-vec_AOS.c(193,1)
  -> INLINE: (194,3) accelerate_flow(const t_param, t_speed *, int *) (isz = 160) (sz = 171)
  -> (195,18) calculateNextState(const t_param, t_speed *, t_speed *, int *) (isz = 493) (sz = 506)
     [[ Inlining would exceed -inline-max-size value (506>230) <1>]]


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at d2q9-bgk-vec_AOS.c(215,3) inlined into d2q9-bgk-vec_AOS.c(194,3)
<Peeled loop for vectorization>
   remark #25015: Estimate of max trip count of loop=7
LOOP END

LOOP BEGIN at d2q9-bgk-vec_AOS.c(215,3) inlined into d2q9-bgk-vec_AOS.c(194,3)
   remark #15415: vectorization support: non-unit strided load was generated for the variable <cells->speeds[ii+jj*params.nx][3]>, stride is 9   [ d2q9-bgk-vec_AOS.c(220,13) ]
   remark #15415: vectorization support: non-unit strided load was generated for the variable <cells->speeds[ii+jj*params.nx][6]>, stride is 9   [ d2q9-bgk-vec_AOS.c(221,13) ]
   remark #15415: vectorization support: non-unit strided load was generated for the variable <cells->speeds[ii+jj*params.nx][7]>, stride is 9   [ d2q9-bgk-vec_AOS.c(222,13) ]
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <cells->speeds[ii+jj*params.nx][1]>, masked, stride is 9   [ d2q9-bgk-vec_AOS.c(225,7) ]
   remark #15415: vectorization support: non-unit strided load was generated for the variable <cells->speeds[ii+jj*params.nx][1]>, masked, stride is 9   [ d2q9-bgk-vec_AOS.c(225,7) ]
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <cells->speeds[ii+jj*params.nx][5]>, masked, stride is 9   [ d2q9-bgk-vec_AOS.c(226,7) ]
   remark #15415: vectorization support: non-unit strided load was generated for the variable <cells->speeds[ii+jj*params.nx][5]>, masked, stride is 9   [ d2q9-bgk-vec_AOS.c(226,7) ]
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <cells->speeds[ii+jj*params.nx][8]>, masked, stride is 9   [ d2q9-bgk-vec_AOS.c(227,7) ]
   remark #15415: vectorization support: non-unit strided load was generated for the variable <cells->speeds[ii+jj*params.nx][8]>, masked, stride is 9   [ d2q9-bgk-vec_AOS.c(227,7) ]
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <cells->speeds[ii+jj*params.nx][3]>, stride is 9   [ d2q9-bgk-vec_AOS.c(229,7) ]
   remark #15415: vectorization support: non-unit strided load was generated for the variable <cells->speeds[ii+jj*params.nx][3]>, stride is 9   [ d2q9-bgk-vec_AOS.c(229,7) ]
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <cells->speeds[ii+jj*params.nx][6]>, stride is 9   [ d2q9-bgk-vec_AOS.c(230,7) ]
   remark #15415: vectorization support: non-unit strided load was generated for the variable <cells->speeds[ii+jj*params.nx][6]>, stride is 9   [ d2q9-bgk-vec_AOS.c(230,7) ]
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <cells->speeds[ii+jj*params.nx][7]>, stride is 9   [ d2q9-bgk-vec_AOS.c(231,7) ]
   remark #15415: vectorization support: non-unit strided load was generated for the variable <cells->speeds[ii+jj*params.nx][7]>, stride is 9   [ d2q9-bgk-vec_AOS.c(231,7) ]
   remark #15305: vectorization support: vector length 8
   remark #15309: vectorization support: normalized vectorization overhead 0.027
   remark #15301: SIMD LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15452: unmasked strided loads: 6 
   remark #15453: unmasked strided stores: 3 
   remark #15460: masked strided loads: 3 
   remark #15462: unmasked indexed (or gather) loads: 3 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 19 
   remark #15477: vector cost: 88.500 
   remark #15478: estimated potential speedup: 0.220 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at d2q9-bgk-vec_AOS.c(215,3) inlined into d2q9-bgk-vec_AOS.c(194,3)
<Remainder loop for vectorization>
LOOP END

    Report from: Code generation optimizations [cg]

d2q9-bgk-vec_AOS.c(229,7):remark #34064: adjacent sparse (strided) loads partitioned for speed. Details: stride { 36 }, types { F32-V256, I32-V256, I32-V256, F32-V256, F32-V256 }, number of elements { 8 }, select mask { 0x000000019 }.
d2q9-bgk-vec_AOS.c(229,7):remark #34030: adjacent sparse (strided) loads optimized for speed. Details: stride { 36 }, types { F32-V256, F32-V256 }, number of elements { 8 }, select mask { 0x000000003 }.
d2q9-bgk-vec_AOS.c(229,7):remark #34069: adjacent sparse (strided) loads seem unprofitable to optimize. Details: stride { 36 }, types { F32-V256, I32-V256, I32-V256, F32-V256, F32-V256 }, number of elements { 8 }, select mask { 0x000000001 }.
d2q9-bgk-vec_AOS.c(231,7):remark #34065: adjacent sparse (strided) stores partitioned for speed. Details: stride { 36 }, types { F32-V256, I32-V256, I32-V256, F32-V256, F32-V256 }, number of elements { 8 }, select mask { 0x000000019 }.
d2q9-bgk-vec_AOS.c(231,7):remark #34034: adjacent sparse (strided) stores optimized for speed. Details: stride { 36 }, types { F32-V256, F32-V256 }, number of elements { 8 }, select mask { 0x000000003 }.
d2q9-bgk-vec_AOS.c(231,7):remark #34070: adjacent sparse (strided) stores seem unprofitable to optimize. Details: stride { 36 }, types { F32-V256, I32-V256, I32-V256, F32-V256, F32-V256 }, number of elements { 8 }, select mask { 0x000000001 }.
d2q9-bgk-vec_AOS.c(195,18):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (8, 0), and destination (alignment, offset): (1, 0)
d2q9-bgk-vec_AOS.c(193,1):remark #34051: REGISTER ALLOCATION : [timestep] d2q9-bgk-vec_AOS.c:193

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   30[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm15]
        
    Routine temporaries
        Total         :     233
            Global    :      92
            Local     :     141
        Regenerable   :      18
        Spilled       :      16
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :      88 bytes*
            Reads     :      15 [2.01e+00 ~ 2.0%]
            Writes    :      11 [1.72e+00 ~ 1.7%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: accelerate_flow(const t_param, t_speed *, int *)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (accelerate_flow(const t_param, t_speed *, int *)) [5/12=41.7%] d2q9-bgk-vec_AOS.c(203,1)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at d2q9-bgk-vec_AOS.c(215,3)
<Peeled loop for vectorization>
   remark #25015: Estimate of max trip count of loop=7
LOOP END

LOOP BEGIN at d2q9-bgk-vec_AOS.c(215,3)
   remark #15415: vectorization support: non-unit strided load was generated for the variable <cells->speeds[ii+jj*params.nx][3]>, stride is 9   [ d2q9-bgk-vec_AOS.c(220,13) ]
   remark #15415: vectorization support: non-unit strided load was generated for the variable <cells->speeds[ii+jj*params.nx][6]>, stride is 9   [ d2q9-bgk-vec_AOS.c(221,13) ]
   remark #15415: vectorization support: non-unit strided load was generated for the variable <cells->speeds[ii+jj*params.nx][7]>, stride is 9   [ d2q9-bgk-vec_AOS.c(222,13) ]
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <cells->speeds[ii+jj*params.nx][1]>, masked, stride is 9   [ d2q9-bgk-vec_AOS.c(225,7) ]
   remark #15415: vectorization support: non-unit strided load was generated for the variable <cells->speeds[ii+jj*params.nx][1]>, masked, stride is 9   [ d2q9-bgk-vec_AOS.c(225,7) ]
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <cells->speeds[ii+jj*params.nx][5]>, masked, stride is 9   [ d2q9-bgk-vec_AOS.c(226,7) ]
   remark #15415: vectorization support: non-unit strided load was generated for the variable <cells->speeds[ii+jj*params.nx][5]>, masked, stride is 9   [ d2q9-bgk-vec_AOS.c(226,7) ]
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <cells->speeds[ii+jj*params.nx][8]>, masked, stride is 9   [ d2q9-bgk-vec_AOS.c(227,7) ]
   remark #15415: vectorization support: non-unit strided load was generated for the variable <cells->speeds[ii+jj*params.nx][8]>, masked, stride is 9   [ d2q9-bgk-vec_AOS.c(227,7) ]
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <cells->speeds[ii+jj*params.nx][3]>, stride is 9   [ d2q9-bgk-vec_AOS.c(229,7) ]
   remark #15415: vectorization support: non-unit strided load was generated for the variable <cells->speeds[ii+jj*params.nx][3]>, stride is 9   [ d2q9-bgk-vec_AOS.c(229,7) ]
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <cells->speeds[ii+jj*params.nx][6]>, stride is 9   [ d2q9-bgk-vec_AOS.c(230,7) ]
   remark #15415: vectorization support: non-unit strided load was generated for the variable <cells->speeds[ii+jj*params.nx][6]>, stride is 9   [ d2q9-bgk-vec_AOS.c(230,7) ]
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <cells->speeds[ii+jj*params.nx][7]>, stride is 9   [ d2q9-bgk-vec_AOS.c(231,7) ]
   remark #15415: vectorization support: non-unit strided load was generated for the variable <cells->speeds[ii+jj*params.nx][7]>, stride is 9   [ d2q9-bgk-vec_AOS.c(231,7) ]
   remark #15305: vectorization support: vector length 8
   remark #15309: vectorization support: normalized vectorization overhead 0.027
   remark #15301: SIMD LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15452: unmasked strided loads: 6 
   remark #15453: unmasked strided stores: 3 
   remark #15460: masked strided loads: 3 
   remark #15462: unmasked indexed (or gather) loads: 3 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 19 
   remark #15477: vector cost: 88.500 
   remark #15478: estimated potential speedup: 0.220 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at d2q9-bgk-vec_AOS.c(215,3)
<Remainder loop for vectorization>
LOOP END

    Report from: Code generation optimizations [cg]

d2q9-bgk-vec_AOS.c(229,7):remark #34064: adjacent sparse (strided) loads partitioned for speed. Details: stride { 36 }, types { F32-V256, I32-V256, I32-V256, F32-V256, F32-V256 }, number of elements { 8 }, select mask { 0x000000019 }.
d2q9-bgk-vec_AOS.c(229,7):remark #34030: adjacent sparse (strided) loads optimized for speed. Details: stride { 36 }, types { F32-V256, F32-V256 }, number of elements { 8 }, select mask { 0x000000003 }.
d2q9-bgk-vec_AOS.c(229,7):remark #34069: adjacent sparse (strided) loads seem unprofitable to optimize. Details: stride { 36 }, types { F32-V256, I32-V256, I32-V256, F32-V256, F32-V256 }, number of elements { 8 }, select mask { 0x000000001 }.
d2q9-bgk-vec_AOS.c(231,7):remark #34065: adjacent sparse (strided) stores partitioned for speed. Details: stride { 36 }, types { F32-V256, I32-V256, I32-V256, F32-V256, F32-V256 }, number of elements { 8 }, select mask { 0x000000019 }.
d2q9-bgk-vec_AOS.c(231,7):remark #34034: adjacent sparse (strided) stores optimized for speed. Details: stride { 36 }, types { F32-V256, F32-V256 }, number of elements { 8 }, select mask { 0x000000003 }.
d2q9-bgk-vec_AOS.c(231,7):remark #34070: adjacent sparse (strided) stores seem unprofitable to optimize. Details: stride { 36 }, types { F32-V256, I32-V256, I32-V256, F32-V256, F32-V256 }, number of elements { 8 }, select mask { 0x000000001 }.
d2q9-bgk-vec_AOS.c(203,1):remark #34051: REGISTER ALLOCATION : [accelerate_flow] d2q9-bgk-vec_AOS.c:203

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   30[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm15]
        
    Routine temporaries
        Total         :     220
            Global    :      87
            Local     :     133
        Regenerable   :      16
        Spilled       :      13
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :      72 bytes*
            Reads     :      14 [1.70e+00 ~ 1.7%]
            Writes    :       9 [1.31e+00 ~ 1.3%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: av_velocity(const t_param, t_speed *, int *)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (av_velocity(const t_param, t_speed *, int *)) [6/12=50.0%] d2q9-bgk-vec_AOS.c(382,1)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at d2q9-bgk-vec_AOS.c(394,3)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at d2q9-bgk-vec_AOS.c(396,5)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at d2q9-bgk-vec_AOS.c(404,9)
         remark #15389: vectorization support: reference cells->speeds[ii+jj*params.nx][kk] has unaligned access   [ d2q9-bgk-vec_AOS.c(406,28) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15305: vectorization support: vector length 4
         remark #15399: vectorization support: unroll factor set to 2
         remark #15309: vectorization support: normalized vectorization overhead 1.833
         remark #15355: vectorization support: local_density is float type reduction   [ d2q9-bgk-vec_AOS.c(402,29) ]
         remark #15300: LOOP WAS VECTORIZED
         remark #15450: unmasked unaligned unit stride loads: 1 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 5 
         remark #15477: vector cost: 1.500 
         remark #15478: estimated potential speedup: 1.150 
         remark #15488: --- end vector cost summary ---
         remark #25015: Estimate of max trip count of loop=1
      LOOP END

      LOOP BEGIN at d2q9-bgk-vec_AOS.c(404,9)
      <Remainder loop for vectorization>
         remark #25436: completely unrolled by 1  
      LOOP END
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

d2q9-bgk-vec_AOS.c(382,1):remark #34051: REGISTER ALLOCATION : [av_velocity] d2q9-bgk-vec_AOS.c:382

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   29[ rax rdx rcx rbx rsi rdi r8-r11 r13-r15 zmm0-zmm15]
        
    Routine temporaries
        Total         :      63
            Global    :      23
            Local     :      40
        Regenerable   :       4
        Spilled       :       4
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :      32 bytes*
            Reads     :       4 [5.64e-01 ~ 0.6%]
            Writes    :       4 [5.64e-01 ~ 0.6%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: finalise(const t_param *, t_speed **, t_speed **, int **, float **)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (finalise(const t_param *, t_speed **, t_speed **, int **, float **)) [7/12=58.3%] d2q9-bgk-vec_AOS.c(593,1)
  -> EXTERN: (597,3) _mm_free(void *)
  -> EXTERN: (600,3) _mm_free(void *)
  -> EXTERN: (603,3) free(void *)
  -> EXTERN: (606,3) free(void *)


    Report from: Code generation optimizations [cg]

d2q9-bgk-vec_AOS.c(593,1):remark #34051: REGISTER ALLOCATION : [finalise] d2q9-bgk-vec_AOS.c:593

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   10[ rax rdx rcx rbx rbp rsi rdi r8 r12-r13]
        
    Routine temporaries
        Total         :      24
            Global    :      10
            Local     :      14
        Regenerable   :       1
        Spilled       :       4
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: calc_reynolds(const t_param, t_speed *, int *)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (calc_reynolds(const t_param, t_speed *, int *)) [8/12=66.7%] d2q9-bgk-vec_AOS.c(614,1)
  -> INLINE: (617,10) av_velocity(const t_param, t_speed *, int *) (isz = 163) (sz = 174)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at d2q9-bgk-vec_AOS.c(394,3) inlined into d2q9-bgk-vec_AOS.c(617,10)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at d2q9-bgk-vec_AOS.c(396,5) inlined into d2q9-bgk-vec_AOS.c(617,10)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at d2q9-bgk-vec_AOS.c(404,9) inlined into d2q9-bgk-vec_AOS.c(617,10)
         remark #15389: vectorization support: reference cells->speeds[ii+jj*params.nx][kk] has unaligned access   [ d2q9-bgk-vec_AOS.c(406,28) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15305: vectorization support: vector length 4
         remark #15399: vectorization support: unroll factor set to 2
         remark #15309: vectorization support: normalized vectorization overhead 1.833
         remark #15355: vectorization support: local_density is float type reduction   [ d2q9-bgk-vec_AOS.c(402,29) ]
         remark #15300: LOOP WAS VECTORIZED
         remark #15450: unmasked unaligned unit stride loads: 1 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 5 
         remark #15477: vector cost: 1.500 
         remark #15478: estimated potential speedup: 1.150 
         remark #15488: --- end vector cost summary ---
         remark #25015: Estimate of max trip count of loop=1
      LOOP END

      LOOP BEGIN at d2q9-bgk-vec_AOS.c(404,9) inlined into d2q9-bgk-vec_AOS.c(617,10)
      <Remainder loop for vectorization>
         remark #25436: completely unrolled by 1  
      LOOP END
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

d2q9-bgk-vec_AOS.c(614,1):remark #34051: REGISTER ALLOCATION : [calc_reynolds] d2q9-bgk-vec_AOS.c:614

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   29[ rax rdx rcx rbx rsi rdi r8-r11 r13-r15 zmm0-zmm15]
        
    Routine temporaries
        Total         :      69
            Global    :      24
            Local     :      45
        Regenerable   :       5
        Spilled       :       4
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :      32 bytes*
            Reads     :       4 [5.57e-01 ~ 0.6%]
            Writes    :       4 [5.57e-01 ~ 0.6%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: total_density(const t_param, t_speed *)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (total_density(const t_param, t_speed *)) [9/12=75.0%] d2q9-bgk-vec_AOS.c(621,1)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at d2q9-bgk-vec_AOS.c(624,3)
   remark #25101: Loop Interchange not done due to: Original Order seems proper
   remark #25452: Original Order found to be proper, but by a close margin
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at d2q9-bgk-vec_AOS.c(626,5)
   <Peeled loop for vectorization>
      remark #25015: Estimate of max trip count of loop=7
   LOOP END

   LOOP BEGIN at d2q9-bgk-vec_AOS.c(626,5)
      remark #25420: Collapsed with loop at line 628 
      remark #15389: vectorization support: reference cells->speeds[ii+jj*params.nx][kk] has unaligned access   [ d2q9-bgk-vec_AOS.c(630,18) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15399: vectorization support: unroll factor set to 2
      remark #15309: vectorization support: normalized vectorization overhead 1.000
      remark #15355: vectorization support: total is float type reduction   [ d2q9-bgk-vec_AOS.c(622,15) ]
      remark #15300: LOOP WAS VECTORIZED
      remark #15450: unmasked unaligned unit stride loads: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 5 
      remark #15477: vector cost: 0.620 
      remark #15478: estimated potential speedup: 6.000 
      remark #15488: --- end vector cost summary ---

      LOOP BEGIN at d2q9-bgk-vec_AOS.c(628,7)
         remark #25421: Loop eliminated in Collapsing 

      LOOP END
   LOOP END

   LOOP BEGIN at d2q9-bgk-vec_AOS.c(626,5)
   <Remainder loop for vectorization>
      remark #15389: vectorization support: reference cells->speeds[ii+jj*params.nx][kk] has unaligned access   [ d2q9-bgk-vec_AOS.c(630,18) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 6.333
      remark #15355: vectorization support: total is float type reduction   [ d2q9-bgk-vec_AOS.c(622,15) ]
      remark #15450: unmasked unaligned unit stride loads: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 5 
      remark #15477: vector cost: 0.620 
      remark #15478: estimated potential speedup: 6.000 
      remark #15488: --- end vector cost summary ---
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

d2q9-bgk-vec_AOS.c(621,1):remark #34051: REGISTER ALLOCATION : [total_density] d2q9-bgk-vec_AOS.c:621

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   18[ rax rdx rcx rbx rsi rdi r8-r11 zmm0-zmm7]
        
    Routine temporaries
        Total         :      45
            Global    :      23
            Local     :      22
        Regenerable   :       3
        Spilled       :       1
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: die(const char *, const int, const char *)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (die(const char *, const int, const char *)) [10/12=83.3%] d2q9-bgk-vec_AOS.c(726,1)
  -> EXTERN: (727,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
  -> EXTERN: (728,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
  -> EXTERN: (729,3) fflush(FILE *)
  -> EXTERN: (730,3) exit(int)


    Report from: Code generation optimizations [cg]

d2q9-bgk-vec_AOS.c(726,1):remark #34051: REGISTER ALLOCATION : [die] d2q9-bgk-vec_AOS.c:726

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    6[ rax rdx rcx rbx rsi rdi]
        
    Routine temporaries
        Total         :      28
            Global    :       1
            Local     :      27
        Regenerable   :       9
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: usage(const char *)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (usage(const char *)) [11/12=91.7%] d2q9-bgk-vec_AOS.c(734,1)
  -> EXTERN: (735,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
  -> EXTERN: (736,3) exit(int)


    Report from: Code generation optimizations [cg]

d2q9-bgk-vec_AOS.c(734,1):remark #34051: REGISTER ALLOCATION : [usage] d2q9-bgk-vec_AOS.c:734

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    4[ rax rdx rsi rdi]
        
    Routine temporaries
        Total         :      15
            Global    :       0
            Local     :      15
        Regenerable   :       4
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: initialise(const char *, const char *, t_param *, t_speed **, t_speed **, int **, float **)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (initialise(const char *, const char *, t_param *, t_speed **, t_speed **, int **, float **)) [12/12=100.0%] d2q9-bgk-vec_AOS.c(439,1)
  -> EXTERN: (447,8) fopen(const char *__restrict__, const char *__restrict__)
  -> EXTERN: (451,5) sprintf(char *__restrict__, const char *__restrict__, ...)
  -> INLINE: (452,5) die(const char *, const int, const char *) (isz = 14) (sz = 22)
    -> EXTERN: (727,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (728,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (729,3) fflush(FILE *)
    -> EXTERN: (730,3) exit(int)
  -> EXTERN: (456,12) fscanf(FILE *__restrict__, const char *__restrict__, ...)
  -> INLINE: (458,20) die(const char *, const int, const char *) (isz = 14) (sz = 22)
    -> EXTERN: (727,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (728,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (729,3) fflush(FILE *)
    -> EXTERN: (730,3) exit(int)
  -> EXTERN: (460,12) fscanf(FILE *__restrict__, const char *__restrict__, ...)
  -> INLINE: (462,20) die(const char *, const int, const char *) (isz = 14) (sz = 22)
    -> EXTERN: (727,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (728,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (729,3) fflush(FILE *)
    -> EXTERN: (730,3) exit(int)
  -> EXTERN: (464,12) fscanf(FILE *__restrict__, const char *__restrict__, ...)
  -> INLINE: (466,20) die(const char *, const int, const char *) (isz = 14) (sz = 22)
    -> EXTERN: (727,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (728,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (729,3) fflush(FILE *)
    -> EXTERN: (730,3) exit(int)
  -> EXTERN: (468,12) fscanf(FILE *__restrict__, const char *__restrict__, ...)
  -> INLINE: (470,20) die(const char *, const int, const char *) (isz = 14) (sz = 22)
    -> EXTERN: (727,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (728,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (729,3) fflush(FILE *)
    -> EXTERN: (730,3) exit(int)
  -> EXTERN: (472,12) fscanf(FILE *__restrict__, const char *__restrict__, ...)
  -> INLINE: (474,20) die(const char *, const int, const char *) (isz = 14) (sz = 22)
    -> EXTERN: (727,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (728,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (729,3) fflush(FILE *)
    -> EXTERN: (730,3) exit(int)
  -> EXTERN: (476,12) fscanf(FILE *__restrict__, const char *__restrict__, ...)
  -> INLINE: (478,20) die(const char *, const int, const char *) (isz = 14) (sz = 22)
    -> EXTERN: (727,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (728,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (729,3) fflush(FILE *)
    -> EXTERN: (730,3) exit(int)
  -> EXTERN: (480,12) fscanf(FILE *__restrict__, const char *__restrict__, ...)
  -> INLINE: (482,20) die(const char *, const int, const char *) (isz = 14) (sz = 22)
    -> EXTERN: (727,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (728,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (729,3) fflush(FILE *)
    -> EXTERN: (730,3) exit(int)
  -> EXTERN: (485,3) fclose(FILE *)
  -> EXTERN: (507,26) _mm_malloc(unsigned long long, unsigned long long)
  -> INLINE: (509,27) die(const char *, const int, const char *) (isz = 14) (sz = 22)
    -> EXTERN: (727,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (728,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (729,3) fflush(FILE *)
    -> EXTERN: (730,3) exit(int)
  -> EXTERN: (512,30) _mm_malloc(unsigned long long, unsigned long long)
  -> INLINE: (514,31) die(const char *, const int, const char *) (isz = 14) (sz = 22)
    -> EXTERN: (727,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (728,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (729,3) fflush(FILE *)
    -> EXTERN: (730,3) exit(int)
  -> EXTERN: (517,20) malloc(size_t)
  -> INLINE: (519,31) die(const char *, const int, const char *) (isz = 14) (sz = 22)
    -> EXTERN: (727,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (728,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (729,3) fflush(FILE *)
    -> EXTERN: (730,3) exit(int)
  -> EXTERN: (555,8) fopen(const char *__restrict__, const char *__restrict__)
  -> EXTERN: (559,5) sprintf(char *__restrict__, const char *__restrict__, ...)
  -> INLINE: (560,5) die(const char *, const int, const char *) (isz = 14) (sz = 22)
    -> EXTERN: (727,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (728,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (729,3) fflush(FILE *)
    -> EXTERN: (730,3) exit(int)
  -> EXTERN: (564,20) fscanf(FILE *__restrict__, const char *__restrict__, ...)
  -> EXTERN: (564,20) fscanf(FILE *__restrict__, const char *__restrict__, ...)
  -> INLINE: (567,22) die(const char *, const int, const char *) (isz = 14) (sz = 22)
    -> EXTERN: (727,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (728,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (729,3) fflush(FILE *)
    -> EXTERN: (730,3) exit(int)
  -> INLINE: (569,40) die(const char *, const int, const char *) (isz = 14) (sz = 22)
    -> EXTERN: (727,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (728,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (729,3) fflush(FILE *)
    -> EXTERN: (730,3) exit(int)
  -> INLINE: (571,40) die(const char *, const int, const char *) (isz = 14) (sz = 22)
    -> EXTERN: (727,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (728,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (729,3) fflush(FILE *)
    -> EXTERN: (730,3) exit(int)
  -> INLINE: (573,23) die(const char *, const int, const char *) (isz = 14) (sz = 22)
    -> EXTERN: (727,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (728,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (729,3) fflush(FILE *)
    -> EXTERN: (730,3) exit(int)
  -> EXTERN: (580,3) fclose(FILE *)
  -> EXTERN: (586,26) malloc(size_t)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at d2q9-bgk-vec_AOS.c(526,3)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at d2q9-bgk-vec_AOS.c(528,5)
   <Distributed chunk1>
      remark #25426: Loop Distributed (6 way) 
      remark #15329: vectorization support: non-unit strided store was emulated for the variable <*cells_ptr->speeds[ii+jj*params->nx][4]>, stride is 9   [ d2q9-bgk-vec_AOS.c(536,9) ]
      remark #15305: vectorization support: vector length 16
      remark #15309: vectorization support: normalized vectorization overhead 0.051
      remark #15301: PARTIAL LOOP WAS VECTORIZED
      remark #15453: unmasked strided stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 3 
      remark #15477: vector cost: 2.430 
      remark #15478: estimated potential speedup: 1.210 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at d2q9-bgk-vec_AOS.c(528,5)
   <Remainder loop for vectorization, Distributed chunk1>
   LOOP END

   LOOP BEGIN at d2q9-bgk-vec_AOS.c(528,5)
   <Distributed chunk2>
      remark #15329: vectorization support: non-unit strided store was emulated for the variable <*cells_ptr->speeds[ii+jj*params->nx][3]>, stride is 9   [ d2q9-bgk-vec_AOS.c(535,9) ]
      remark #15305: vectorization support: vector length 16
      remark #15309: vectorization support: normalized vectorization overhead 0.051
      remark #15301: PARTIAL LOOP WAS VECTORIZED
      remark #15453: unmasked strided stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 3 
      remark #15477: vector cost: 2.430 
      remark #15478: estimated potential speedup: 1.210 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at d2q9-bgk-vec_AOS.c(528,5)
   <Remainder loop for vectorization, Distributed chunk2>
   LOOP END

   LOOP BEGIN at d2q9-bgk-vec_AOS.c(528,5)
   <Distributed chunk3>
      remark #15329: vectorization support: non-unit strided store was emulated for the variable <*cells_ptr->speeds[ii+jj*params->nx][2]>, stride is 9   [ d2q9-bgk-vec_AOS.c(534,9) ]
      remark #15305: vectorization support: vector length 16
      remark #15309: vectorization support: normalized vectorization overhead 0.051
      remark #15301: PARTIAL LOOP WAS VECTORIZED
      remark #15453: unmasked strided stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 3 
      remark #15477: vector cost: 2.430 
      remark #15478: estimated potential speedup: 1.210 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at d2q9-bgk-vec_AOS.c(528,5)
   <Remainder loop for vectorization, Distributed chunk3>
   LOOP END

   LOOP BEGIN at d2q9-bgk-vec_AOS.c(528,5)
   <Distributed chunk4>
      remark #15329: vectorization support: non-unit strided store was emulated for the variable <*cells_ptr->speeds[ii+jj*params->nx][1]>, stride is 9   [ d2q9-bgk-vec_AOS.c(533,9) ]
      remark #15305: vectorization support: vector length 16
      remark #15309: vectorization support: normalized vectorization overhead 0.051
      remark #15301: PARTIAL LOOP WAS VECTORIZED
      remark #15453: unmasked strided stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 3 
      remark #15477: vector cost: 2.430 
      remark #15478: estimated potential speedup: 1.210 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at d2q9-bgk-vec_AOS.c(528,5)
   <Remainder loop for vectorization, Distributed chunk4>
   LOOP END

   LOOP BEGIN at d2q9-bgk-vec_AOS.c(528,5)
   <Distributed chunk5>
      remark #15329: vectorization support: non-unit strided store was emulated for the variable <*cells_ptr->speeds[ii+jj*params->nx][0]>, stride is 9   [ d2q9-bgk-vec_AOS.c(531,9) ]
      remark #15305: vectorization support: vector length 16
      remark #15309: vectorization support: normalized vectorization overhead 0.051
      remark #15301: PARTIAL LOOP WAS VECTORIZED
      remark #15453: unmasked strided stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 3 
      remark #15477: vector cost: 2.430 
      remark #15478: estimated potential speedup: 1.210 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at d2q9-bgk-vec_AOS.c(528,5)
   <Remainder loop for vectorization, Distributed chunk5>
   LOOP END

   LOOP BEGIN at d2q9-bgk-vec_AOS.c(528,5)
   <Distributed chunk6>
      remark #15542: loop was not vectorized: inner loop was already vectorized
      remark #25439: unrolled with remainder by 2  

      LOOP BEGIN at d2q9-bgk-vec_AOS.c(538,9)
         remark #15389: vectorization support: reference *cells_ptr->speeds[ii+jj*params->nx][_2+5] has unaligned access
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15305: vectorization support: vector length 4
         remark #15427: loop was completely unrolled
         remark #15309: vectorization support: normalized vectorization overhead 0.800
         remark #15301: MATERIALIZED LOOP WAS VECTORIZED
         remark #15451: unmasked unaligned unit stride stores: 1 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 3 
         remark #15477: vector cost: 1.250 
         remark #15478: estimated potential speedup: 1.330 
         remark #15488: --- end vector cost summary ---
      LOOP END
   LOOP END

   LOOP BEGIN at d2q9-bgk-vec_AOS.c(528,5)
   <Remainder, Distributed chunk6>
   LOOP END
LOOP END

LOOP BEGIN at d2q9-bgk-vec_AOS.c(546,3)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at d2q9-bgk-vec_AOS.c(548,5)
      remark #25408: memset generated
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at d2q9-bgk-vec_AOS.c(548,5)
         remark #15389: vectorization support: reference obstacles_ptr has unaligned access   [ d2q9-bgk-vec_AOS.c(550,9) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15305: vectorization support: vector length 8
         remark #15309: vectorization support: normalized vectorization overhead 0.600
         remark #15300: LOOP WAS VECTORIZED
         remark #15451: unmasked unaligned unit stride stores: 1 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 3 
         remark #15477: vector cost: 0.620 
         remark #15478: estimated potential speedup: 4.000 
         remark #15488: --- end vector cost summary ---
         remark #25015: Estimate of max trip count of loop=3
      LOOP END

      LOOP BEGIN at d2q9-bgk-vec_AOS.c(548,5)
      <Remainder loop for vectorization>
         remark #25015: Estimate of max trip count of loop=24
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at d2q9-bgk-vec_AOS.c(564,3)
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
LOOP END

    Report from: Code generation optimizations [cg]

d2q9-bgk-vec_AOS.c(548,5):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
d2q9-bgk-vec_AOS.c(548,5):remark #34026: call to memset implemented as a call to optimized library version
d2q9-bgk-vec_AOS.c(439,1):remark #34051: REGISTER ALLOCATION : [initialise] d2q9-bgk-vec_AOS.c:439

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   17[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm2]
        
    Routine temporaries
        Total         :     515
            Global    :     103
            Local     :     412
        Regenerable   :     242
        Spilled       :      12
        
    Routine stack
        Variables     :    1036 bytes*
            Reads     :       3 [3.61e-01 ~ 0.4%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :      56 bytes*
            Reads     :      16 [1.03e+00 ~ 1.0%]
            Writes    :      10 [5.05e-01 ~ 0.5%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

    Report from: Interprocedural optimizations [ipo]

INLINING FOOTNOTES:

<1> The function is larger than the inliner would normally inline.  Use the
    option -inline-max-size to increase the size of any function that would
    normally be inlined, add "inline __attribute__((always_inline))" to the
    declaration of the called function, or add "#pragma forceinline" before
    the call site.

